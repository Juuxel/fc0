--- a/tk/valoeghese/sod/ShortArrayDataSection.java
+++ b/tk/valoeghese/sod/ShortArrayDataSection.java
@@ -1,35 +1,43 @@
-/*
- * Decompiled with CFR 0.150.
- */
 package tk.valoeghese.sod;
 
+import java.util.Iterator;
+
 import it.unimi.dsi.fastutil.shorts.ShortArrayList;
 import it.unimi.dsi.fastutil.shorts.ShortList;
-import java.util.Iterator;
-import tk.valoeghese.sod.BaseDataSection;
 
-public final class ShortArrayDataSection
-implements BaseDataSection<Short> {
-    private final ShortList array = new ShortArrayList();
+public class ShortArrayDataSection implements BaseDataSection<Short> {
+    public ShortArrayDataSection() {
+        this.array = new ShortArrayList();
+    }
 
-    public final int size() {
-        return this.array.size();
+    private final ShortList array;
+
+    public void writeShort(short value) {
+        this.array.add(value);
     }
 
+    public int size() {
+        return array.size();
+    }
+
+    /**
+     * @deprecated Should only be used by the parser! Please use the type specific methods instead for writing data.
+     */
     @Override
-    public final <T> void writeForParser(T object) {
-        if (object instanceof Short) {
-            short s = (Short)object;
-            object = this;
-            ((ShortArrayDataSection)object).array.add(s);
-            return;
+    public <T> void writeForParser(T data) throws UnsupportedOperationException {
+        if (data instanceof Short) {
+            this.writeShort((Short) data);
+        } else {
+            throw new UnsupportedOperationException("Invalid data type parameter for this data section");
         }
-        throw new UnsupportedOperationException("Invalid data type parameter for this data section");
     }
 
+    public short readShort(int index) {
+        return this.array.getShort(index);
+    }
+
     @Override
-    public final Iterator<Short> iterator() {
+    public Iterator<Short> iterator() {
         return this.array.iterator();
     }
 }
-
